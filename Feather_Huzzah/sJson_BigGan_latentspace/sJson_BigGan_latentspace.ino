
// wifi lib
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
// json lib
#include <ArduinoJson.h>


ESP8266WiFiMulti WiFiMulti;
const char* ssid = "put-your-wifi-ssid-here";
const char* pass = "put-your-wifi-password-here";
const char* host = "http://192.168.8.102:8000/query";

float  vector1 [] = {0.1004326242631583, -0.5052634863748567, -0.3574750845097171, -0.09887982888619234, -0.09586899557450114, -0.047085773295185276, 0.4439336872306302, -0.21865749577453777, -0.8648960341310831, -0.38201666542604146, 0.3128810134874104, 0.2651446352079547, -0.07995645878573349, 0.06690894197175319, -0.1482176969732551, -0.22018234973906065, 0.06394418405141433, -0.1781665020349835, -0.08548291302444411, -0.2769785834656679, -0.403790195740298, -0.29200067429914056, 0.5558875060104557, 0.20181112649082117, -0.46257498347735493, -0.6651253678794078, 0.04512632646371578, -0.44898030352953977, 0.5986539946960489, -0.3409954780984152, 0.13415488366674322, -0.33190857524591194, -0.1642206375052169, 0.2758110858796118, -0.17367990344101986, -0.512806381518875, -0.4186243700119792, -0.28408696325282573, 0.3568240397355466, -0.35960121219223307, -0.3802736668320423, 0.341696051267192, -0.4205949766694526, 0.23139451198382005, -0.11063394048389597, -0.19605352756911776, -0.40462051085417794, -0.15999764293828914, 0.103209293565076, -0.16017833129623738, -0.04112473506167314, -0.2574670363064505, 0.18367102759716958, -0.06771020357249838, 0.2329814415751793, -0.30105554281327096, -0.38395507561214154, 0.22683571551527684, 0.16782047335393596, -0.06122059760851967, 0.23251051762468938, 0.29470218395017733, 0.3754324148485721, 0.07725127915482666, -0.1482929118850602, 0.3275845561813568, -0.1388111152087539, 0.09023190663189451, -0.16154192277085067, 0.04048443159546078, 0.12063491621111228, 0.5078787185829823, -0.9731306084382192, -0.27048955539865793, 0.000426958749216777, -0.3527310630487434, 0.12839577204286776, 0.2805060727866114, -0.03113768461343135, 0.21474491084944963, 0.47217473395984655, -0.1810770953894608, -0.14119487493202798, -0.01986792131588816, 0.40714375835493993, -0.22631923730749462, -0.41469316724366123, -0.24187402878084585, 0.5512480957707316, -0.06803934209268817, 0.2816210991699472, 0.2357354681868109, 0.23919108993529356, -0.06483583914057273, 0.019748786749127743, 0.2753418291292188, -0.545405628123854, -0.03236587449727624, -0.3729632304463155, -0.3086950047983207, -0.46000585908818353, 0.4969090113505706, 0.4698690171678705, -0.19488104169781373, -0.41220882053188956, 0.21770008712940492, -0.2927242632808543, 0.08627413035076457, 0.08236470110605834, -0.7028082404471989, -0.008993735896730144, 0.5471153916697399, 0.13580185706927556, 0.1859556927693816, -0.21582985097863971, 0.0744862918054853, -0.2551018258780528, -0.0020232416509062268, -0.03261393697276365, -0.3000010679994802, -0.6462812459638825, 0.23884057108216272, 0.3642410504460307, -0.008817155568744711, -0.07720480800837724, -0.43332512458730227, -0.3689946118790561, -0.19803873321724244, -0.38454573668938763, 0.46067915665827674, 0.0022717579517635145, -0.28241819198949947, 0.3012134898520177, -0.11102064581272991, -0.1152041786914687, -0.14353926427000394, -0.005402207087474284, -0.5365710871618721, 0.1073960794614631, 0.19468267893792315};
float  vector2 [] = {0.18780731365010533, -0.32883469302684076, 0.48461126432895796, -0.22546847422186014, -0.8342698309618004, 0.4169120775691119, -0.12300002611989756, -0.1526593414463869, -0.21926814800985028, 0.016493923066670746, 0.31484094961237796, -0.6324984716325858, -0.3361760722221543, -0.7315793612669278, 0.042422645063224435, -0.34163787713567334, -0.06038285294403681, 0.2021639982071864, -0.2802090047330814, -0.3575253480302012, 0.3884023186411776, 0.06839577111749458, 0.10805064079399858, -0.140710432747813, 0.47123195604395984, -0.1194706346846047, -0.41953282462564206, -0.6177928725601127, -0.14863449260110712, -0.04865555576978653, -0.3209533622366595, 0.03059674940203, -0.17923106405062422, 0.21447915288310881, 0.2957605842521072, 0.1317149787477604, -0.08024731553555024, 0.7346232299315292, 0.00258213802070284, -0.7011408396413411, 0.3633895746178014, -0.16826254446382868, -0.42191437608565585, 0.38633796290222183, -0.08575662604435531, -0.008312257035428108, -0.607986242562921, -0.007663070305406139, -0.02693762111726744, 0.7662481583784351, 0.22041090821769274, -0.35245254486833905, 0.04592740520551735, 0.2504204645926673, -0.25293284993111836, -0.8221224432858812, -0.43994348439183273, -0.5817347006227718, -0.1839817911330694, 0.36843697981687856, 0.17666302377505855, 0.4672508554364217, -0.2177740395201369, 0.3883284016041178, 0.5551094314211913, 0.12430728093180257, 0.22536189356021108, -0.16330210849032212, 0.4562927258092787, -0.30744835492095757, -0.5979773020144372, 0.0949543286815806, 0.1880673644915653, -0.09762528799503123, 0.12664230327409898, -0.29781544164814444, -0.14495044151157208, 0.2198255508460326, 0.06112128406202075, 0.03190879263747698, -0.3761421293989392, 0.11434202988388398, -0.2021192649413215, -0.5093185181348098, -0.16975942237430933, -0.02285234830210628, -0.5995497326087604, -0.19665650581995955, -0.217122836654005, 0.02545017327520309, 0.24969000892535154, 0.2536176556188208, -0.11043940436106725, 0.4177477128193517, 0.19826591019639472, -0.28180386865133444, 0.019221993466165724, -0.4650708880767601, 0.41263441848021315, -0.0051168901290935265, 0.4455644990769272, -0.3468352996938666, 0.06381012867625438, -0.22283443092006008, -0.12909716986226222, -0.09795719361401087, -0.7227569478917791, 0.48538048516751475, 0.46603304443573923, -0.020400389750490397, -0.25014827074707036, -0.18393427768813503, -0.48397044627455593, 0.20255235370915295, 0.3263699128689152, 0.3619446722515572, -0.19470959534203153, 0.9135659591480431, -0.2780077277667308, 0.42629439980594025, -0.3275260991954504, 0.1046749150268019, -0.023755295146767635, 0.08857796587708452, 0.044298805073131636, 0.1799179824291668, -0.12510262501252079, 0.35710761216881065, 0.04019701503764636, 0.24983980816628662, 0.0026660217602811967, -0.13485560807811964, -0.18915583663226118, -0.15911614110861852, -0.23240976781291198, -0.10602481687362553, 0.5122890544228011, 0.018607943114788764, 0.09215276756089952, 0.27948842961786885};


void setup() {
  Serial.begin(115200);
  delay(100);
  wifi_connect();


}

void loop() {

  Serial.println(analogRead(17));

  // Use arduinojson.org/assistant to compute the capacity.
  const size_t capacity = JSON_ARRAY_SIZE(140) + JSON_OBJECT_SIZE(2);
  DynamicJsonDocument doc(capacity);

  doc["category"] = "bubble";
  JsonArray z = doc.createNestedArray("z");

  //float vector[140];
  for (int i = 0; i < 140; i++) {
    float v1 = analogRead(17) / 340.0;
    float v2 = (340 - analogRead(17)) / 340.0;
    z.add( (vector1[i] * v1 + vector2[i] * v2) / 2 );
  }

  

  serializeJson(doc, Serial); // print json to serial output

  // write data to a string with json formatting
  String json;
  serializeJson(doc, json);
  http_post(json); // post it !

  delay(1000);



}



void wifi_connect() {
  Serial.println();
  Serial.println();
  Serial.println();
  WiFi.mode(WIFI_STA);
  WiFiMulti.addAP(ssid, pass);
  for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }
  delay(1000);
  Serial.print("connected : ");
  Serial.println(WiFiMulti.run() == WL_CONNECTED );
}

void http_post(String content) {
  // wait for WiFi connection
  if ((WiFiMulti.run() == WL_CONNECTED)) {
    WiFiClient client;
    HTTPClient http;
    Serial.print("[HTTP] begin...\n");
    if (http.begin(client, host)) {  // HTTP withe the route defined by runway
      // post to http
      http.addHeader("Content-Type", "application/json");
      int httpCode = http.POST(content);
      // handle response
      // httpCode will be negative on error
      if (httpCode > 0) {
        // HTTP header has been send and Server response header has been handled
        Serial.printf("[HTTP] POST... code: %d\n", httpCode);
        // file found at server
        if (httpCode == HTTP_CODE_OK) {
        }
      } else {
        Serial.printf("[HTTP] POST... failed, error: %s\n", http.errorToString(httpCode).c_str());
      }
      // close
      http.end();
    }
  }

}
